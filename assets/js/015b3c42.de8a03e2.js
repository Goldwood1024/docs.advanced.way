(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6735],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return g}});var s=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,i=function(e,n){if(null==e)return{};var t,s,i={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},p=s.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),g=i,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||a;return t?s.createElement(m,r(r({ref:n},u),{},{components:t})):s.createElement(m,r({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<a;c++)r[c]=t[c];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5672:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var s=t(22122),i=t(19756),a=(t(67294),t(3905)),r=["components"],o={title:"Session"},l={unversionedId:"zoology/spring-family/springmvc/Session",id:"zoology/spring-family/springmvc/Session",isDocsHomePage:!1,title:"Session",description:"Session/Cookies",source:"@site/docs/zoology/spring-family/springmvc/Session.md",sourceDirName:"zoology/spring-family/springmvc",slug:"/zoology/spring-family/springmvc/Session",permalink:"/docs.advanced.way/docs/zoology/spring-family/springmvc/Session",editUrl:"https://github.com/Goldwood1024/docs.advanced.way/tree/master/docs/zoology/spring-family/springmvc/Session.md",version:"current",lastUpdatedAt:1622711894,formattedLastUpdatedAt:"6/3/2021",frontMatter:{title:"Session"},sidebar:"spring",previous:{title:"Servlet",permalink:"/docs.advanced.way/docs/zoology/spring-family/springmvc/Servlet"},next:{title:"DispatcherServlet",permalink:"/docs.advanced.way/docs/zoology/spring-family/springmvc/DispatcherServlet"}},c=[{value:"Session/Cookies",id:"sessioncookies",children:[{value:"Session",id:"session",children:[]},{value:"servlet \u5b9a\u4e49\u7684 HttpSession",id:"servlet-\u5b9a\u4e49\u7684-httpsession",children:[]}]},{value:"Tomcat\u5b9e\u73b0\u65b9\u5f0f",id:"tomcat\u5b9e\u73b0\u65b9\u5f0f",children:[{value:"\u6838\u5fc3\u7c7b",id:"\u6838\u5fc3\u7c7b",children:[]},{value:"\u521b\u5efaSession\u8fc7\u7a0b",id:"\u521b\u5efasession\u8fc7\u7a0b",children:[]},{value:"\u8bbe\u7f6e/\u67e5\u627e",id:"\u8bbe\u7f6e\u67e5\u627e",children:[]}]},{value:"Session \u5171\u4eab",id:"session-\u5171\u4eab",children:[{value:"Tomcat \u96c6\u7fa4",id:"tomcat-\u96c6\u7fa4",children:[]},{value:"Spring Session",id:"spring-session",children:[]}]},{value:"\u53c2\u8003",id:"\u53c2\u8003",children:[]}],u={toc:c};function d(e){var n=e.components,o=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,s.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"sessioncookies"},"Session/Cookies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"session \u5728\u670d\u52a1\u5668\u7aef\uff0ccookie \u5728\u5ba2\u6237\u7aef\uff08\u6d4f\u89c8\u5668\uff09"),(0,a.kt)("li",{parentName:"ul"},"session \u9ed8\u8ba4\u88ab\u5b58\u5728\u5728\u670d\u52a1\u5668\u7684\u4e00\u4e2a\u6587\u4ef6\u91cc\uff08\u4e0d\u662f\u5185\u5b58\uff09"),(0,a.kt)("li",{parentName:"ul"},"session \u7684\u8fd0\u884c\u4f9d\u8d56 session id\uff0c\u800c session id \u662f\u5b58\u5728 cookie \u4e2d\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6d4f\u89c8\u5668\u7981\u7528\u4e86 cookie \uff0c\u540c\u65f6 session \u4e5f\u4f1a\u5931\u6548\uff08\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5176\u5b83\u65b9\u5f0f\u5b9e\u73b0\uff0c\u6bd4\u5982\u5728 url \u4e2d\u4f20\u9012 session_id\uff09"),(0,a.kt)("li",{parentName:"ul"},"session \u53ef\u4ee5\u653e\u5728 \u6587\u4ef6\u3001\u6570\u636e\u5e93\u3001\u6216\u5185\u5b58\u4e2d\u90fd\u53ef\u4ee5\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u7528\u6237\u9a8c\u8bc1\u8fd9\u79cd\u573a\u5408\u4e00\u822c\u4f1a\u7528 session")),(0,a.kt)("h3",{id:"session"},"Session"),(0,a.kt)("p",null,"session\u673a\u5236\u662f\u4e00\u79cd\u670d\u52a1\u5668\u7aef\u7684\u673a\u5236\uff0c\u670d\u52a1\u5668\u4f7f\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u6563\u5217\u8868\u7684\u7ed3\u6784\uff08\u4e5f\u53ef\u80fd\u5c31\u662f\u4f7f\u7528\u6563\u5217\u8868\uff09\u6765\u4fdd\u5b58\u4fe1\u606f"),(0,a.kt)("p",null,"\u5f53\u7a0b\u5e8f\u9700\u8981\u4e3a\u67d0\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2asession\u65f6\uff0c\u670d\u52a1\u5668\u9996\u5148\u68c0\u67e5\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u91cc\u662f\u5426\u5df2\u5305\u542b\u4e86\u4e00\u4e2asession\u6807\u8bc6\uff08\u79f0\u4e3asession id\uff09\uff0c\u5982\u679c\u5df2\u5305\u542b\u5219\u8bf4\u660e\u4ee5\u524d\u5df2\u7ecf\u4e3a\u6b64\u5ba2\u6237\u7aef\u521b\u5efa\u8fc7session\uff0c\u670d\u52a1\u5668\u5c31\u6309\u7167session id\u628a\u8fd9\u4e2asession\u68c0\u7d22\u51fa\u6765\u4f7f\u7528\uff08\u68c0\u7d22\u4e0d\u5230\uff0c\u4f1a\u65b0\u5efa\u4e00\u4e2a\uff09\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e0d\u5305\u542bsession id\uff0c\u5219\u4e3a\u6b64\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2asession\u5e76\u4e14\u751f\u6210\u4e00\u4e2a\u4e0e\u6b64session\u76f8\u5173\u8054\u7684session id\uff0csession id\u7684\u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u65e2\u4e0d\u4f1a\u91cd\u590d\uff0c\u53c8\u4e0d\u5bb9\u6613\u88ab\u627e\u5230\u89c4\u5f8b\u4ee5\u4eff\u9020\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2asession id\u5c06\u88ab\u5728\u672c\u6b21\u54cd\u5e94\u4e2d\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4fdd\u5b58"),(0,a.kt)("h3",{id:"servlet-\u5b9a\u4e49\u7684-httpsession"},"servlet \u5b9a\u4e49\u7684 HttpSession"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public interface HttpSession {\n    // Session \u521b\u5efa\u65f6\u95f4\u6233\n    public long getCreationTime();\n    // Session Id\n    public String getId();\n\n    // \u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4\n    public long getLastAccessedTime();\n\n    public ServletContext getServletContext();\n\n    // \u83b7\u53d6\u548c\u8bbe\u7f6e\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\n    public void setMaxInactiveInterval(int interval);\n    public int getMaxInactiveInterval();\n\n    public Object getAttribute(String name);\n\n    // \u5c06session\u8bbe\u7f6e\u4e3a\u5931\u6548\n    public void invalidate();\n    public boolean isNew();\n}\n")),(0,a.kt)("h2",{id:"tomcat\u5b9e\u73b0\u65b9\u5f0f"},"Tomcat\u5b9e\u73b0\u65b9\u5f0f"),(0,a.kt)("h3",{id:"\u6838\u5fc3\u7c7b"},"\u6838\u5fc3\u7c7b"),(0,a.kt)("h4",{id:"standardsession"},"StandardSession"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(29585).Z})),(0,a.kt)("p",null,"\u9ed8\u8ba4\u7684session\u7684\u7c7b\uff0c\u662f\u5bf9session\u7684\u7cfb\u7edf\u62bd\u8c61"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class StandardSession implements HttpSession, Session, Serializable {\n\n    protected long creationTime = 0L;\n\n    // \u5b58\u50a8session\u7684\u6570\u636e\u7ed3\u6784\n    protected ConcurrentMap<String, Object> attributes = new ConcurrentHashMap<>();\n\n    // \u83b7\u53d6 session \u503c\n    @Override\n    public Object getAttribute(String name) {\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString("standardSession.getAttribute.ise"));\n\n        if (name == null) return null;\n\n        // \u4ece ConcurrentMap \u53d6\u51fa\u503c\n        return attributes.get(name);\n    }\n}\n')),(0,a.kt)("h4",{id:"standardmanager"},"StandardManager"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(63349).Z})),(0,a.kt)("p",null,"\u9ed8\u8ba4\u7684session\u7ba1\u7406\u7c7b\uff0c\u7ba1\u7406session\u7684\u521b\u5efa\u3001\u52a0\u8f7d\u3001\u6301\u4e45\u5316\u7b49"),(0,a.kt)("h3",{id:"\u521b\u5efasession\u8fc7\u7a0b"},"\u521b\u5efaSession\u8fc7\u7a0b"),(0,a.kt)("h4",{id:"\u6848\u4f8b"},"\u6848\u4f8b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@GetMapping("/getSession")\npublic void get(HttpServletRequest request) {\n    // get\n    HttpSession session = request.getSession();\n\n    System.out.println(session.getId());\n\n    String sessionKey = "a";\n    session.setAttribute(sessionKey, 1);\n    System.out.println(session.getAttribute(sessionKey));\n}\n')),(0,a.kt)("h4",{id:"requestfacade"},"RequestFacade"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class RequestFacade implements HttpServletRequest {\n\n    @Override\n    public HttpSession getSession() {\n        // \u8bf7\u6c42\u68c0\u67e5\n        if (request == null) {\n            throw new IllegalStateException(\n                            sm.getString("requestFacade.nullRequest"));\n        }\n\n        return getSession(true);\n    }\n\n    @Override\n    public HttpSession getSession(boolean create) {\n\n        if (request == null) {\n            throw new IllegalStateException(\n                            sm.getString("requestFacade.nullRequest"));\n        }\n\n        if (SecurityUtil.isPackageProtectionEnabled()){\n            return AccessController.doPrivileged(new GetSessionPrivilegedAction(create));\n        } else {\n            // \u9ed8\u8ba4\u8fdb\u5165\u8fd9\u91cc\n            return request.getSession(create);\n        }\n    }\n}\n')),(0,a.kt)("h4",{id:"request"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class Request implements HttpServletRequest {\n    @Override\n    public HttpSession getSession(boolean create) {\n        // \u83b7\u53d6\u6216\u521b\u5efaSession\n        Session session = doGetSession(create);\n        if (session == null) {\n            return null;\n        }\n\n        return session.getSession();\n    }\n\n    protected Session doGetSession(boolean create) {\n\n        // There cannot be a session if no context has been assigned yet\n        Context context = getContext();\n        if (context == null) {\n            return null;\n        }\n\n        // \u5982\u679c\u5f53\u524d\u5b58\u5728 session \u4e14\u6709\u6548 \u8fd4\u56de\n        if ((session != null) && !session.isValid()) {\n            session = null;\n        }\n        if (session != null) {\n            return session;\n        }\n\n        // \u5982\u679c\u5b58\u5728\u4e14\u6709\u6548\uff0c\u5219\u8fd4\u56de\u6240\u8bf7\u6c42\u7684\u4f1a\u8bdd\n        Manager manager = context.getManager();\n        if (manager == null) {\n            return null;      // Sessions are not supported\n        }\n        // \u5982\u679cSessionId \u4e0d\u4e3a\u7a7a\uff0c\u4ece manager \u67e5\u627e\n        if (requestedSessionId != null) {\n            try {\n                session = manager.findSession(requestedSessionId);\n            } catch (IOException e) {\n                if (log.isDebugEnabled()) {\n                    log.debug(sm.getString("request.session.failed", requestedSessionId, e.getMessage()), e);\n                } else {\n                    log.info(sm.getString("request.session.failed", requestedSessionId, e.getMessage()));\n                }\n                session = null;\n            }\n            if ((session != null) && !session.isValid()) {\n                session = null;\n            }\n            if (session != null) {\n                session.access();\n                return session;\n            }\n        }\n\n        // \u5982\u679c\u8bf7\u6c42\u800c\u54cd\u5e94\u672a\u63d0\u4ea4\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u4f1a\u8bdd\n        if (!create) {\n            return null;\n        }\n        boolean trackModesIncludesCookie =\n                context.getServletContext().getEffectiveSessionTrackingModes().contains(SessionTrackingMode.COOKIE);\n        if (trackModesIncludesCookie && response.getResponse().isCommitted()) {\n            throw new IllegalStateException(sm.getString("coyoteRequest.sessionCreateCommitted"));\n        }\n\n        // Re-use session IDs provided by the client in very limited\n        // circumstances.\n        String sessionId = getRequestedSessionId();\n        if (requestedSessionSSL) {\n            // If the session ID has been obtained from the SSL handshake then\n            // use it.\n        } else if (("/".equals(context.getSessionCookiePath())\n                && isRequestedSessionIdFromCookie())) {\n             //\u6b64\u5904\u662f\u4e3a\u4e86\u8de8\u6d4f\u89c8\u5668\u76f8\u540csessionID\u7684\u8bbf\u95ee\n            if (context.getValidateClientProvidedNewSessionId()) {\n                boolean found = false;\n                for (Container container : getHost().findChildren()) {\n                    Manager m = ((Context) container).getManager();\n                    if (m != null) {\n                        try {\n                            if (m.findSession(sessionId) != null) {\n                                found = true;\n                                break;\n                            }\n                        } catch (IOException e) {\n                            // Ignore. Problems with this manager will be\n                            // handled elsewhere.\n                        }\n                    }\n                }\n                if (!found) {\n                    sessionId = null;\n                }\n            }\n        } else {\n            sessionId = null;\n        }\n        // \u521b\u5efa Session\n        session = manager.createSession(sessionId);\n\n        // Creating a new session cookie based on that session\n        if (session != null && trackModesIncludesCookie) {\n            Cookie cookie = ApplicationSessionCookieConfig.createSessionCookie(\n                    context, session.getIdInternal(), isSecure());\n\n            response.addSessionCookieInternal(cookie);\n        }\n\n        if (session == null) {\n            return null;\n        }\n\n        // \u8bb0\u5f55\u6700\u540e\u65b9\u4f4d\u65f6\u95f4\n        session.access();\n        return session;\n    }\n}\n')),(0,a.kt)("h4",{id:"managerbase"},"ManagerBase"),(0,a.kt)("p",null,"\u7ba1\u7406 session"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public abstract class ManagerBase extends LifecycleMBeanBase implements Manager {\n\n    // \u4fdd\u5b58 Session\n    protected Map<String, Session> sessions = new ConcurrentHashMap<>();\n\n    @Override\n    public Session createSession(String sessionId) {\n\n        if ((maxActiveSessions >= 0) && (getActiveSessions() >= maxActiveSessions)) {\n            rejectedSessions++;\n            throw new TooManyActiveSessionsException(\n                    sm.getString("managerBase.createSession.ise"),\n                    maxActiveSessions);\n        }\n\n        // \u56de\u6536\u6216\u521b\u5efa\u4f1a\u8bdd\u5b9e\u4f8b\n        Session session = createEmptySession();\n\n        // \u521d\u59cb\u5316\u65b0\u4f1a\u8bdd\u7684\u5c5e\u6027\u5e76\u8fd4\u56de\u5b83\n        session.setNew(true);\n        session.setValid(true);\n        session.setCreationTime(System.currentTimeMillis());\n        session.setMaxInactiveInterval(getContext().getSessionTimeout() * 60);\n        String id = sessionId;\n        if (id == null) {\n            // \u751f\u6210\u4e00\u4e2a sessionId\n            id = generateSessionId();\n        }\n\n// \u8bbe\u7f6e Id \u548c \u628a session \u653e\u5165\u5bb9\u5668\n        session.setId(id);\n        sessionCounter++;\n\n        SessionTiming timing = new SessionTiming(session.getCreationTime(), 0);\n        synchronized (sessionCreationTiming) {\n            sessionCreationTiming.add(timing);\n            sessionCreationTiming.poll();\n        }\n        return session;\n    }\n\n    @Override\n    public Session createEmptySession() {\n        return getNewSession();\n    }\n\n    protected StandardSession getNewSession() {\n        return new StandardSession(this);\n    }\n\n    protected String generateSessionId() {\n        String result = null;\n        do {\n            if (result != null) {\n                duplicates++;\n            }\n\n            // \u751f\u6210Id\n            result = sessionIdGenerator.generateSessionId();\n        // \u5faa\u73af\u9632\u6b62\u91cd\u590dId\n        } while (sessions.containsKey(result));\n\n        return result;\n    }\n\n    // \u6839\u636e sessionId \u67e5\u627e Session\n    @Override\n    public Session findSession(String id) throws IOException {\n        if (id == null) {\n            return null;\n        }\n        return sessions.get(id);\n    }\n\n    @Override\n    public void add(Session session) {\n        // \u628a session \u653e\u5165\u5bb9\u5668\u4e2d\n        sessions.put(session.getIdInternal(), session);\n\n        // \u662f\u5426\u8d85\u8fc7\u5bb9\u91cf\u6700\u5927\u9650\u5236\n        int size = getActiveSessions();\n        if( size > maxActive ) {\n            synchronized(maxActiveUpdateLock) {\n                if( size > maxActive ) {\n                    maxActive = size;\n                }\n            }\n        }\n    }\n}\n\n')),(0,a.kt)("h4",{id:"standardsession-1"},"StandardSession"),(0,a.kt)("p",null,"Session key-value \u7ba1\u7406"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class StandardSession implements HttpSession, Session, Serializable {\n    public StandardSession(Manager manager) {\n\n        super();\n        this.manager = manager;\n\n        // Initialize access count\n        if (ACTIVITY_CHECK) {\n            accessCount = new AtomicInteger();\n        }\n\n    }\n\n    @Override\n    public void access() {\n        // \u8bb0\u5f55\u8bbf\u95ee\u65f6\u95f4\n        this.thisAccessedTime = System.currentTimeMillis();\n\n        if (ACTIVITY_CHECK) {\n            accessCount.incrementAndGet();\n        }\n    }\n\n    @Override\n    public void setId(String id) {\n        setId(id, true);\n    }\n\n    @Override\n    public void setId(String id, boolean notify) {\n\n        if ((this.id != null) && (manager != null))\n            manager.remove(this);\n\n        this.id = id;\n\n        if (manager != null)\n            manager.add(this);\n\n        // \u76d1\u542c\u4e8b\u4ef6\n        if (notify) {\n            tellNew();\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"\u8bbe\u7f6e\u67e5\u627e"},"\u8bbe\u7f6e/\u67e5\u627e"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n// session.getAttribute(sessionKey)\n// session.setAttribute(sessionKey, 1);\npublic class StandardSession implements HttpSession, Session, Serializable {\n    // \u4fdd\u5b58 session key-value\n    protected ConcurrentMap<String, Object> attributes = new ConcurrentHashMap<>();\n\n    @Override\n    public Object getAttribute(String name) {\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString("standardSession.getAttribute.ise"));\n\n        if (name == null) return null;\n\n        // get\n        return attributes.get(name);\n    }\n\n    // \u8bbe\u7f6e Session\n    public void setAttribute(String name, Object value, boolean notify) {\n\n        // Name cannot be null\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString("standardSession.setAttribute.namenull"));\n        }\n\n        // Null value is the same as removeAttribute()\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        // Validate our current state\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString("standardSession.setAttribute.ise", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString("standardSession.setAttribute.iae", name));\n        }\n        // Construct an event with the new value\n        HttpSessionBindingEvent event = null;\n\n        // Call the valueBound() method if necessary\n        if (notify && value instanceof HttpSessionBindingListener) {\n            // Don\'t call any notification if replacing with the same value\n            // unless configured to do so\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString("standardSession.bindingEvent"), t);\n                }\n            }\n        }\n\n        // Replace or add this attribute\n        Object unbound = attributes.put(name, value);\n\n        // Call the valueUnbound() method if necessary\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            // Don\'t call any notification if replacing with the same value\n            // unless configured to do so\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString("standardSession.bindingEvent"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        // Notify interested application event listeners\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (Object o : listeners) {\n            if (!(o instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent("beforeSessionAttributeReplaced", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent("afterSessionAttributeReplaced", listener);\n                    }\n                } else {\n                    context.fireContainerEvent("beforeSessionAttributeAdded", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent("afterSessionAttributeAdded", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent("afterSessionAttributeReplaced", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent("afterSessionAttributeAdded", listener);\n                    }\n                } catch (Exception e) {\n                    // Ignore\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString("standardSession.attributeEvent"), t);\n            }\n        }\n    }\n}\n')),(0,a.kt)("h2",{id:"session-\u5171\u4eab"},"Session \u5171\u4eab"),(0,a.kt)("h3",{id:"tomcat-\u96c6\u7fa4"},"Tomcat \u96c6\u7fa4"),(0,a.kt)("p",null,"\u914d\u7f6etomcat \u96c6\u7fa4\uff0c\u81ea\u52a8\u4f1a\u5171\u4eabsession"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'\x3c!-- \u7b2c1\u6b65\uff1a\u4fee\u6539server.xml\uff0c\u5728Host\u8282\u70b9\u4e0b\u6dfb\u52a0\u5982\u4e0bCluster\u8282\u70b9 --\x3e\n<Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster" channelSendOptions="8">\n\x3c!-- \u5728\u8282\u70b9\u95f4\u62f7\u8d1dSession , \u9ed8\u8ba4all-to-all\u4f1a\u8bdd\u590d\u5236 --\x3e\n    <Manager className="org.apache.catalina.ha.session.DeltaManager" \n                expireSessionsOnShutdown="false" \n                notifyListenersOnReplication="true" />\n\n    <Channel className="org.apache.catalina.tribes.group.GroupChannel">\n        <Membership className="org.apache.catalina.tribes.membership.McastService" address="228.0.0.4" \n                    port="45564" frequency="500" dropTime="3000" />\n\n        <Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver" \n                    address="auto" \n                    port="4000" \n                    autoBind="100" \n                    selectorTimeout="5000" \n                    maxThreads="6" />\n\n        <Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter">\n            <Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender" />\n        </Sender>\n\n        <Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector" />\n        <Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor" />\n    </Channel>\n\n    <Valve className="org.apache.catalina.ha.tcp.ReplicationValve" filter="" />\n    <Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve" />\n\n    <Deployer className="org.apache.catalina.ha.deploy.FarmWarDeployer" tempDir="/tmp/war-temp/" \n              deployDir="/tmp/war-deploy/" watchDir="/tmp/war-listen/" watchEnabled="false" />\n\n    <ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener" />\n</Cluster>\n \n\x3c!-- \u7b2c2\u6b65\uff1a\u5728web.xml\u4e2d\u6dfb\u52a0\u5982\u4e0b\u8282\u70b9 --\x3e\n<distributable/>\n')),(0,a.kt)("h4",{id:"\u6b65\u9aa4"},"\u6b65\u9aa4"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4fee\u6539 ",(0,a.kt)("inlineCode",{parentName:"p"},"server.xml"),"\uff0c\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"Host")," \u8282\u70b9\u4e0b\u6dfb\u52a0\u5982\u4e0b ",(0,a.kt)("inlineCode",{parentName:"p"},"Cluster")," \u8282\u70b9")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"web.xml")," \u4e2d\u6dfb\u52a0 ",(0,a.kt)("inlineCode",{parentName:"p"},"<distributable/>")))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"cluster: ","[\u02c8kl\u028cst\u0259(r)]"," ",(0,a.kt)("br",null),"\ndistributable: ","[di'stribjut\u0259bl]")),(0,a.kt)("h4",{id:"\u914d\u7f6e\u8bf4\u660e"},"\u914d\u7f6e\u8bf4\u660e"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(91873).Z})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Manager")),(0,a.kt)("p",null,"\u7528\u6765\u5728\u8282\u70b9\u95f4\u62f7\u8d1dSession\uff0c\u9ed8\u8ba4\u4f7f\u7528DeltaManager\uff0cDeltaManager\u91c7\u7528\u7684\u4e00\u79cdall-to-all\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5373\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9\u4f1a\u628aSession\u6570\u636e\u5411\u6240\u6709\u5176\u4ed6\u8282\u70b9\u62f7\u8d1d\uff0c\u800c\u4e0d\u7ba1\u5176\u4ed6\u8282\u70b9\u662f\u5426\u90e8\u7f72\u4e86\u5f53\u524d\u5e94\u7528\u3002"),(0,a.kt)("p",null,"\u5f53\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9\u6570\u91cf\u5f88\u591a\u5e76\u4e14\u90e8\u7f72\u7740\u4e0d\u540c\u5e94\u7528\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528BackupManager\uff0cBackManager\u4ec5\u5411\u90e8\u7f72\u4e86\u5f53\u524d\u5e94\u7528\u7684\u8282\u70b9\u62f7\u8d1dSession"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Channel\n\u8d1f\u8d23\u5bf9tomcat\u96c6\u7fa4\u7684IO\u5c42\u8fdb\u884c\u914d\u7f6e"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"* Membership \u7528\u4e8e\u53d1\u73b0\u96c6\u7fa4\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\uff0c\u8fd9\u91cc\u7684address\u7528\u7684\u662f\u7ec4\u64ad\u5730\u5740\uff08Multicast address\n* Receiver \u7528\u4e8e\u5404\u4e2a\u8282\u70b9\u63a5\u6536\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u7684\u6570\u636e\uff0c\u5728\u9ed8\u8ba4\u914d\u7f6e\u4e0btomcat\u4f1a\u4ece4000-4100\u95f4\u4f9d\u6b21\u9009\u53d6\u4e00\u4e2a\u53ef\u7528\u7684\u7aef\u53e3\u8fdb\u884c\u63a5\u6536\n* Sender \u7528\u4e8e\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u6570\u636e PooledParallelSender\u662f\u4ecetcp\u8fde\u63a5\u6c60\u4e2d\u83b7\u53d6\u8fde\u63a5\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5e76\u884c\u53d1\u9001\uff0c\u5373\u96c6\u7fa4\u4e2d\u7684\u591a\u4e2a\u8282\u70b9\u53ef\u4ee5\u540c\u65f6\u5411\u5176\u4ed6\u6240\u6709\u8282\u70b9\u53d1\u9001\u6570\u636e\u800c\u4e92\u4e0d\u5f71\u54cd\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Valve"))),(0,a.kt)("p",null,"\u7528\u4e8e\u5728\u8282\u70b9\u5411\u5ba2\u6237\u7aef\u54cd\u5e94\u524d\u8fdb\u884c\u68c0\u6d4b\u6216\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Deployer")),(0,a.kt)("p",null,"\u7528\u4e8e\u96c6\u7fa4\u7684farm\u529f\u80fd\uff0c\u76d1\u63a7\u5e94\u7528\u4e2d\u6587\u4ef6\u7684\u66f4\u65b0\uff0c\u4ee5\u4fdd\u8bc1\u96c6\u7fa4\u4e2d\u6240\u6709\u8282\u70b9\u5e94\u7528\u7684\u4e00\u81f4\u6027"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Listener")),(0,a.kt)("p",null,"\u7528\u4e8e\u8ddf\u8e2a\u96c6\u7fa4\u4e2d\u8282\u70b9\u53d1\u51fa\u548c\u6536\u5230\u7684\u6570\u636e\uff0c\u4e5f\u6709\u70b9\u7c7b\u4f3cValve\u7684\u529f\u80fd"),(0,a.kt)("h3",{id:"spring-session"},"Spring Session"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.session</groupId>\n    <artifactId>spring-session-data-redis</artifactId>\n</dependency>\n\n\x3c!-- @EnableRedisHttpSession --\x3e\n")),(0,a.kt)("h2",{id:"\u53c2\u8003"},"\u53c2\u8003"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://blog.csdn.net/zengdeqing2012/article/details/50127139"},"tomcat\u96c6\u7fa4Cluster\u5b9e\u73b0\u539f\u7406\u5256\u6790")))}d.isMDXComponent=!0},91873:function(e,n,t){"use strict";n.Z=t.p+"assets/images/20181206164419260-06b4c06726a4b26ee5905914fabd827c.png"},63349:function(e,n,t){"use strict";n.Z=t.p+"assets/images/StandardManager-51c67044e9a2ce7252da84b5945595f9.png"},29585:function(e,n,t){"use strict";n.Z=t.p+"assets/images/StandardSession-ed09b40205e42f87a743555ee1d6f8e5.png"}}]);