(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{427:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return d}));var i=t(3),a=t(7),r=(t(0),t(502)),o={title:"Feign"},l={unversionedId:"middleware/distributed/springcloud/feign",id:"middleware/distributed/springcloud/feign",isDocsHomePage:!1,title:"Feign",description:"\u7b80\u4ecb",source:"@site/docs/middleware/distributed/springcloud/feign.md",slug:"/middleware/distributed/springcloud/feign",permalink:"/docs.advanced.way/docs/middleware/distributed/springcloud/feign",editUrl:"https://github.com/Goldwood1024/docs.advanced.way/docs/docs/middleware/distributed/springcloud/feign.md",version:"current",lastUpdatedAt:1616295465,formattedLastUpdatedAt:"3/21/2021",sidebar:"distributed",previous:{title:"Consul",permalink:"/docs.advanced.way/docs/middleware/distributed/module/consul"}},c=[{value:"\u7b80\u4ecb",id:"\u7b80\u4ecb",children:[]},{value:"\u5982\u4f55\u4f7f\u7528",id:"\u5982\u4f55\u4f7f\u7528",children:[{value:"\u5f15\u5165\u4f9d\u8d56",id:"\u5f15\u5165\u4f9d\u8d56",children:[]},{value:"\u6dfb\u52a0 EnableFeignClients \u6ce8\u89e3",id:"\u6dfb\u52a0-enablefeignclients-\u6ce8\u89e3",children:[]},{value:"\u5b9a\u4e49\u63a5\u53e3",id:"\u5b9a\u4e49\u63a5\u53e3",children:[]}]},{value:"\u539f\u7406",id:"\u539f\u7406",children:[{value:"@EnableFeignClients",id:"enablefeignclients",children:[]},{value:"FeignClientFactoryBean",id:"feignclientfactorybean",children:[]}]}],s={toc:c};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"\u7b80\u4ecb"},"\u7b80\u4ecb"),Object(r.b)("h2",{id:"\u5982\u4f55\u4f7f\u7528"},"\u5982\u4f55\u4f7f\u7528"),Object(r.b)("h3",{id:"\u5f15\u5165\u4f9d\u8d56"},"\u5f15\u5165\u4f9d\u8d56"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- feign \u4f9d\u8d56 --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n\x3c!-- \u4f7f\u7528okhttp\u7684\u8fde\u63a5\u6c60 --\x3e\n<dependency>\n    <groupId>io.github.openfeign</groupId>\n    <artifactId>feign-okhttp</artifactId>\n</dependency>\n\x3c!-- \u4f7f\u7528\u77ed\u8def\u5668 --\x3e\n<dependency>\n    <groupId>io.github.openfeign</groupId>\n    <artifactId>feign-hystrix</artifactId>\n</dependency>\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"feign: \n  okhttp:\n    enable: true\n")),Object(r.b)("h3",{id:"\u6dfb\u52a0-enablefeignclients-\u6ce8\u89e3"},"\u6dfb\u52a0 EnableFeignClients \u6ce8\u89e3"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"@EnableFeignClients\npublic class ServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceApplication.class, args);\n    }\n}\n")),Object(r.b)("h3",{id:"\u5b9a\u4e49\u63a5\u53e3"},"\u5b9a\u4e49\u63a5\u53e3"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},'@FeignClient(value = "service_name", fallbackFactory = ServiceFeignFallbackFactory.class)\npublic interface ServiceFeign {\n    // \u8c03\u7528API\u58f0\u660e\n    @GetMapping("/m1/getAccount")\n    R getAccount(@RequestParam("accountId") String accountId);\n}\n\n@Service\npublic class ServiceFeignFallbackFactory implements FallbackFactory<ServiceFeign> {\n\n    @Override\n    public AdminServiceFeign create(Throwable cause) {\n        ServiceFeignImpl serviceFeign = new ServiceFeignImpl();\n        serviceFeign.setCause(cause);\n        return serviceFeign;\n    }\n}\n\n@Service\npublic class ServiceFeignImpl implements ServiceFeign {\n    private Throwable cause;\n    // \u65ad\u8def\u5668\u65b9\u6cd5\n    public R getAccount(String accountId){\n        return R.error();\n    }\n}\n\n\n// how to work\npublic class Demo{\n    // \u6ce8\u5165\u4f9d\u8d56\n    private ServiceFeign serviceFeign;\n\n    // \u670d\u52a1\u8c03\u7528\n    serviceFeign.getAccount("123");\n}\n')),Object(r.b)("h2",{id:"\u539f\u7406"},"\u539f\u7406"),Object(r.b)("p",null,"\u57fa\u4e8eJDK\u52a8\u6001\u4ee3\u7406\u673a\u5236\u751f\u6210\u4ee3\u7406\u5bf9\u8c61"),Object(r.b)("h3",{id:"enablefeignclients"},"@EnableFeignClients"),Object(r.b)("p",null,"\u7528\u4e8e\u542f\u52a8\u9875feign, \u5e76\u5c06 ",Object(r.b)("inlineCode",{parentName:"p"},"FeignClients")," \u6ce8\u89e3\u7684\u7c7b\u6ce8\u5165\u5230\u5bb9\u5668\u5185"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import(FeignClientsRegistrar.class)\npublic @interface EnableFeignClients {\n    // \u6307\u5b9a\u5ba2\u6237\u7aef\u63a5\u53e3\u6240\u5728\u7684\u7c7b\n    String[] basePackages() default {};\n\n    // \u6307\u5b9a\u914d\u7f6e\u7c7b \u9ed8\u8ba4\u4f7f\u7528 FeignClientsConfiguration\n    Class<?>[] defaultConfiguration() default {};\n    ...\n}\n")),Object(r.b)("h4",{id:"feignclientsregistrar"},"FeignClientsRegistrar"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},'class FeignClientsRegistrar\n        implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware {\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata metadata,\n            BeanDefinitionRegistry registry) {\n        // \u6ce8\u518c\u914d\u7f6e\u7c7b\n        registerDefaultConfiguration(metadata, registry);\n        // \u6ce8\u518c\u5ba2\u6237\u7aef\u7c7b\n        registerFeignClients(metadata, registry);\n    }\n\n    private void registerDefaultConfiguration(AnnotationMetadata metadata,\n            BeanDefinitionRegistry registry) {\n        // \u67e5\u8be2EnableFeignClients\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u6210Map\u5bf9\u8c61\n        Map<String, Object> defaultAttrs = metadata\n                .getAnnotationAttributes(EnableFeignClients.class.getName(), true);\n\n        if (defaultAttrs != null && defaultAttrs.containsKey("defaultConfiguration")) {\n            String name;\n            if (metadata.hasEnclosingClass()) {\n                name = "default." + metadata.getEnclosingClassName();\n            }\n            else {\n                name = "default." + metadata.getClassName();\n            }\n            // \u6ce8\u5165\u5bb9\u5668\n            registerClientConfiguration(registry, name,\n                    defaultAttrs.get("defaultConfiguration"));\n        }\n    }\n\n    private void registerClientConfiguration(BeanDefinitionRegistry registry, Object name,\n            Object configuration) {\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder\n                .genericBeanDefinition(FeignClientSpecification.class);\n        builder.addConstructorArgValue(name);\n        builder.addConstructorArgValue(configuration);\n        // \u6ce8\u5165spring\u5bb9\u5668\n        registry.registerBeanDefinition(\n                name + "." + FeignClientSpecification.class.getSimpleName(),\n                builder.getBeanDefinition());\n    }\n\n    public void registerFeignClients(AnnotationMetadata metadata,\n            BeanDefinitionRegistry registry) {\n        ClassPathScanningCandidateComponentProvider scanner = getScanner();\n        scanner.setResourceLoader(this.resourceLoader);\n\n        Set<String> basePackages;\n\n        Map<String, Object> attrs = metadata\n                .getAnnotationAttributes(EnableFeignClients.class.getName());\n        // \u8fc7\u6ee4 FeignClient \u5ba2\u6237\u7aef\n        AnnotationTypeFilter annotationTypeFilter = new AnnotationTypeFilter(\n                FeignClient.class);\n        final Class<?>[] clients = attrs == null ? null\n                : (Class<?>[]) attrs.get("clients");\n        if (clients == null || clients.length == 0) {\n            scanner.addIncludeFilter(annotationTypeFilter);\n            basePackages = getBasePackages(metadata);\n        }\n        else {\n            final Set<String> clientClasses = new HashSet<>();\n            basePackages = new HashSet<>();\n            for (Class<?> clazz : clients) {\n                basePackages.add(ClassUtils.getPackageName(clazz));\n                clientClasses.add(clazz.getCanonicalName());\n            }\n            AbstractClassTestingTypeFilter filter = new AbstractClassTestingTypeFilter() {\n                @Override\n                protected boolean match(ClassMetadata metadata) {\n                    String cleaned = metadata.getClassName().replaceAll("\\\\$", ".");\n                    return clientClasses.contains(cleaned);\n                }\n            };\n            scanner.addIncludeFilter(\n                    new AllTypeFilter(Arrays.asList(filter, annotationTypeFilter)));\n        }\n\n        for (String basePackage : basePackages) {\n            // \u626b\u63cf FeignClient\n            Set<BeanDefinition> candidateComponents = scanner\n                    .findCandidateComponents(basePackage);\n            for (BeanDefinition candidateComponent : candidateComponents) {\n                if (candidateComponent instanceof AnnotatedBeanDefinition) {\n                    // verify annotated class is an interface\n                    AnnotatedBeanDefinition beanDefinition = (AnnotatedBeanDefinition) candidateComponent;\n                    AnnotationMetadata annotationMetadata = beanDefinition.getMetadata();\n                    Assert.isTrue(annotationMetadata.isInterface(),\n                            "@FeignClient can only be specified on an interface");\n\n                    Map<String, Object> attributes = annotationMetadata\n                            .getAnnotationAttributes(\n                                    FeignClient.class.getCanonicalName());\n\n                    String name = getClientName(attributes);\n                    registerClientConfiguration(registry, name,\n                            attributes.get("configuration"));\n\n                    // \u6ce8\u518c\u5ba2\u6237\u7aef\u5b9e\u4f8b\n                    registerFeignClient(registry, annotationMetadata, attributes);\n                }\n            }\n        }\n    }\n\n    private void registerFeignClient(BeanDefinitionRegistry registry,\n            AnnotationMetadata annotationMetadata, Map<String, Object> attributes) {\n        String className = annotationMetadata.getClassName();\n        // \u751f\u6210\u4ee3\u7406\n        BeanDefinitionBuilder definition = BeanDefinitionBuilder\n                .genericBeanDefinition(FeignClientFactoryBean.class);\n        validate(attributes);\n        // \u7ec4\u88c5\u5ba2\u6237\u7aef\u53c2\u6570\n        definition.addPropertyValue("url", getUrl(attributes));\n        definition.addPropertyValue("path", getPath(attributes));\n        String name = getName(attributes);\n        definition.addPropertyValue("name", name);\n        String contextId = getContextId(attributes);\n        definition.addPropertyValue("contextId", contextId);\n        definition.addPropertyValue("type", className);\n        definition.addPropertyValue("decode404", attributes.get("decode404"));\n        definition.addPropertyValue("fallback", attributes.get("fallback"));\n        definition.addPropertyValue("fallbackFactory", attributes.get("fallbackFactory"));\n        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);\n\n        String alias = contextId + "FeignClient";\n        AbstractBeanDefinition beanDefinition = definition.getBeanDefinition();\n        beanDefinition.setAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE, className);\n\n        // has a default, won\'t be null\n        boolean primary = (Boolean) attributes.get("primary");\n\n        beanDefinition.setPrimary(primary);\n\n        String qualifier = getQualifier(attributes);\n        if (StringUtils.hasText(qualifier)) {\n            alias = qualifier;\n        }\n\n        BeanDefinitionHolder holder = new BeanDefinitionHolder(beanDefinition, className,\n                new String[] { alias });\n        // \u6ce8\u5165\u5bb9\u5668\n        BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);\n    }\n}\n')),Object(r.b)("h3",{id:"feignclientfactorybean"},"FeignClientFactoryBean"))}d.isMDXComponent=!0},502:function(e,n,t){"use strict";t.d(n,"a",(function(){return g})),t.d(n,"b",(function(){return f}));var i=t(0),a=t.n(i);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),d=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=d(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),g=d(t),p=i,f=g["".concat(o,".").concat(p)]||g[p]||u[p]||r;return t?a.a.createElement(f,l(l({ref:n},s),{},{components:t})):a.a.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);