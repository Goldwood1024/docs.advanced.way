(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{302:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return s})),a.d(n,"metadata",(function(){return i})),a.d(n,"toc",(function(){return c})),a.d(n,"default",(function(){return p}));var t=a(3),r=a(7),o=(a(0),a(505)),s={title:"\u542f\u52a8\u6d41\u7a0b"},i={unversionedId:"framework/spring/spring/spring\u542f\u52a8\u6d41\u7a0b",id:"framework/spring/spring/spring\u542f\u52a8\u6d41\u7a0b",isDocsHomePage:!1,title:"\u542f\u52a8\u6d41\u7a0b",description:"AbstractApplicationContext",source:"@site/docs/framework/spring/spring/spring\u542f\u52a8\u6d41\u7a0b.md",slug:"/framework/spring/spring/spring\u542f\u52a8\u6d41\u7a0b",permalink:"/docs.advanced.way/docs/framework/spring/spring/spring\u542f\u52a8\u6d41\u7a0b",editUrl:"https://github.com/Goldwood1024/docs.advanced.way/docs/docs/framework/spring/spring/spring\u542f\u52a8\u6d41\u7a0b.md",version:"current",lastUpdatedAt:1616396760,formattedLastUpdatedAt:"3/22/2021",sidebar:"spring",previous:{title:"BeanDefinition",permalink:"/docs.advanced.way/docs/framework/spring/spring/BeanDefinition"},next:{title:"\u5e38\u89c1\u95ee\u9898",permalink:"/docs.advanced.way/docs/framework/spring/spring/\u95ee\u9898"}},c=[{value:"AbstractApplicationContext",id:"abstractapplicationcontext",children:[]},{value:"prepareRefresh()",id:"preparerefresh",children:[]},{value:"obtainFreshBeanFactory()",id:"obtainfreshbeanfactory",children:[{value:"AbstractRefreshableApplicationContext",id:"abstractrefreshableapplicationcontext",children:[]}]},{value:"prepareBeanFactory()",id:"preparebeanfactory",children:[]},{value:"invokeBeanFactoryPostProcessors()",id:"invokebeanfactorypostprocessors",children:[]},{value:"registerBeanPostProcessors",id:"registerbeanpostprocessors",children:[]},{value:"initMessageSource()",id:"initmessagesource",children:[]},{value:"initApplicationEventMulticaster()",id:"initapplicationeventmulticaster",children:[]},{value:"onRefresh()",id:"onrefresh",children:[]},{value:"registerListeners",id:"registerlisteners",children:[]},{value:"finishBeanFactoryInitialization",id:"finishbeanfactoryinitialization",children:[]},{value:"finishRefresh()",id:"finishrefresh",children:[]}],l={toc:c};function p(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},l,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"abstractapplicationcontext"},"AbstractApplicationContext"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'public abstract class AbstractApplicationContext extends DefaultResourceLoader\n        implements ConfigurableApplicationContext {\n\n    @Override\n    public void refresh() throws BeansException, IllegalStateException {\n        synchronized (this.startupShutdownMonitor) {\n            // \u51c6\u5907\u5de5\u4f5c  \u521d\u59cb\u5316spring\u72b6\u6001 \u4f7fspring\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\n            prepareRefresh();\n\n            // Tell the subclass to refresh the internal bean factory.\n            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n            // Prepare the bean factory for use in this context.\n            prepareBeanFactory(beanFactory);\n\n            try {\n                // Allows post-processing of the bean factory in context subclasses.\n                postProcessBeanFactory(beanFactory);\n\n                // Invoke factory processors registered as beans in the context.\n                invokeBeanFactoryPostProcessors(beanFactory);\n\n                // Register bean processors that intercept bean creation.\n                registerBeanPostProcessors(beanFactory);\n\n                // Initialize message source for this context.\n                initMessageSource();\n\n                // Initialize event multicaster for this context.\n                initApplicationEventMulticaster();\n\n                // Initialize other special beans in specific context subclasses.\n                onRefresh();\n\n                // Check for listener beans and register them.\n                registerListeners();\n\n                // Instantiate all remaining (non-lazy-init) singletons.\n                finishBeanFactoryInitialization(beanFactory);\n\n                // Last step: publish corresponding event.\n                finishRefresh();\n            }\n\n            catch (BeansException ex) {\n                if (logger.isWarnEnabled()) {\n                    logger.warn("Exception encountered during context initialization - " +\n                            "cancelling refresh attempt: " + ex);\n                }\n\n                // Destroy already created singletons to avoid dangling resources.\n                destroyBeans();\n\n                // Reset \'active\' flag.\n                cancelRefresh(ex);\n\n                // Propagate exception to caller.\n                throw ex;\n            }\n\n            finally {\n                // Reset common introspection caches in Spring\'s core, since we\n                // might not ever need metadata for singleton beans anymore...\n                resetCommonCaches();\n            }\n        }\n    }\n}\n')),Object(o.b)("h2",{id:"preparerefresh"},"prepareRefresh()"),Object(o.b)("p",null,"\u8bbe\u7f6estartupDate\u65f6\u95f4\n\u8bbe\u7f6eclosed\u3001active\u72b6\u6001\n\u521d\u59cb\u5316\u5c5e\u6027\u6e90\uff08\u7528\u4e8e\u5b50\u7c7b\u6269\u5c55\uff09\n\u9a8c\u8bc1\u5fc5\u987b\u7684\u914d\u7f6e\u5c5e\u6027"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'protected void prepareRefresh() {\n    // Switch to active.\n    this.startupDate = System.currentTimeMillis();\n    this.closed.set(false);\n    this.active.set(true);\n\n    if (logger.isDebugEnabled()) {\n        if (logger.isTraceEnabled()) {\n            logger.trace("Refreshing " + this);\n        }\n        else {\n            logger.debug("Refreshing " + getDisplayName());\n        }\n    }\n\n    // Initialize any placeholder property sources in the context environment.\n    initPropertySources();\n\n    // Validate that all properties marked as required are resolvable:\n    // see ConfigurablePropertyResolver#setRequiredProperties\n    getEnvironment().validateRequiredProperties();\n\n    // Store pre-refresh ApplicationListeners...\n    if (this.earlyApplicationListeners == null) {\n        this.earlyApplicationListeners = new LinkedHashSet<>(this.applicationListeners);\n    }\n    else {\n        // Reset local application listeners to pre-refresh state.\n        this.applicationListeners.clear();\n        this.applicationListeners.addAll(this.earlyApplicationListeners);\n    }\n\n    // Allow for the collection of early ApplicationEvents,\n    // to be published once the multicaster is available...\n    this.earlyApplicationEvents = new LinkedHashSet<>();\n}\n')),Object(o.b)("h2",{id:"obtainfreshbeanfactory"},"obtainFreshBeanFactory()"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\nprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n    refreshBeanFactory();\n    return getBeanFactory();\n}\n")),Object(o.b)("h3",{id:"abstractrefreshableapplicationcontext"},"AbstractRefreshableApplicationContext"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'public abstract class AbstractRefreshableApplicationContext extends AbstractApplicationContext {\n    // \u5b9a\u4e49 bean \u5de5\u5382\n    private volatile DefaultListableBeanFactory beanFactory;\n\n    @Override\n    protected final void closeBeanFactory() {\n        DefaultListableBeanFactory beanFactory = this.beanFactory;\n        if (beanFactory != null) {\n            beanFactory.setSerializationId(null);\n            this.beanFactory = null;\n        }\n    }\n\n    protected final boolean hasBeanFactory() {\n        return (this.beanFactory != null);\n    }\n\n    protected void destroyBeans() {\n        getBeanFactory().destroySingletons();\n    }\n\n    @Override\n    protected final void refreshBeanFactory() throws BeansException {\n        // \u9500\u6bc1\u65e7\u7684\u5de5\u5382\n        if (hasBeanFactory()) {\n            destroyBeans();\n            closeBeanFactory();\n        }\n        try {\n            // \u521b\u5efa Bean \u5de5\u5382\n            DefaultListableBeanFactory beanFactory = createBeanFactory();\n            // \u8bbe\u7f6e\u5e8f\u5217\u5316id\n            beanFactory.setSerializationId(getId());\n            // \u5b9a\u5236\u5de5\u5382\n            customizeBeanFactory(beanFactory);\n            // \u52a0\u8f7dbean\u5b9a\u4e49 loadBeanDefinitions\n            loadBeanDefinitions(beanFactory);\n            this.beanFactory = beanFactory;\n        }\n        catch (IOException ex) {\n            throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex);\n        }\n    }\n\n    // \u521b\u5efa DefaultListableBeanFactory\n    protected DefaultListableBeanFactory createBeanFactory() {\n        return new DefaultListableBeanFactory(getInternalParentBeanFactory());\n    }\n}\n')),Object(o.b)("p",null,"\u5148\u9500\u6bc1 \u65e7\u7684 Bean \u5de5\u5382\uff0c\u5728\u521b\u5efa\u65b0\u7684 Bean \u5de5\u5382\uff0c",Object(o.b)("a",{parentName:"p",href:"/docs.advanced.way/docs/framework/spring/spring/BeanFactory"},"\u521b\u5efa\u65b9\u6cd5")),Object(o.b)("h2",{id:"preparebeanfactory"},"prepareBeanFactory()"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"prepareBeanFactory(beanFactory);\n\nprotected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n    // \u8bbe\u7f6e\u7c7b\u52a0\u8f7d\u5668\n    beanFactory.setBeanClassLoader(getClassLoader());\n    // \u8bbe\u7f6eEL\u8868\u8fbe\u5f0f\u89e3\u6790\u5668\uff08Bean\u521b\u5efa\u5b8c\u6210\u586b\u5145\u5c5e\u6027\u65f6\u4f7f\u7528\uff09\u548c\u5c5e\u6027\u6ce8\u518c\u89e3\u6790\u5668\n    beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));\n    beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));\n\n    // Configure the bean factory with context callbacks.\n    // \u5229\u7528BeanPostProcessor\u7684\u7279\u6027\u7ed9\u5404\u79cdAware\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u6ce8\u5165ApplicationContext\u4e2d\u5bf9\u5e94\u7684\u5c5e\u6027\n    beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n    // \u8bbe\u7f6e\u5404\u79cdAware\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u4e3a\u5ffd\u7565\u81ea\u52a8\u88c5\u914d\n    beanFactory.ignoreDependencyInterface(EnvironmentAware.class);\n    beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);\n    beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);\n    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n    beanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n    beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n\n    // BeanFactory interface not registered as resolvable type in a plain factory.\n    // MessageSource registered (and found for autowiring) as a bean.\n    // \u6ce8\u518c\u51e0\u4e2a\u81ea\u52a8\u88c5\u914d\u76f8\u5173\u7684\u7c7b\u548c\u5b9e\u4f8b\n    beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\n    beanFactory.registerResolvableDependency(ResourceLoader.class, this);\n    beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\n    beanFactory.registerResolvableDependency(ApplicationContext.class, this);\n\n    // Register early post-processor for detecting inner beans as ApplicationListeners.\n    // \u6dfb\u52a0\u4e00\u4e2aBPP\uff0c\u5904\u7406\u65f6\u95f4\u76d1\u542c\u5668\n    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n\n    // Detect a LoadTimeWeaver and prepare for weaving, if found.\n    if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n        // Set a temporary ClassLoader for type matching.\n        beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n    }\n\n    // Register default environment beans.\n    // \u6ce8\u518c\u7cfb\u7edf\u914d\u7f6e\u548c\u7cfb\u7edf\u73af\u5883\u4fe1\u606f\n    if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {\n        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());\n    }\n    if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {\n        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());\n    }\n    if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {\n        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());\n    }\n}\n")),Object(o.b)("h2",{id:"invokebeanfactorypostprocessors"},"invokeBeanFactoryPostProcessors()"),Object(o.b)("p",null,"\u6fc0\u6d3b\u5404\u79cd\u7684 BeanFacory \u5904\u7406\u5668"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"private final List<BeanFactoryPostProcessor> beanFactoryPostProcessors = new ArrayList<>();\n\nprotected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\n\n    // Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime\n    // (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)\n    if (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n        beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n    }\n}\n\npublic List<BeanFactoryPostProcessor> getBeanFactoryPostProcessors() {\n    return this.beanFactoryPostProcessors;\n}\n")),Object(o.b)("h2",{id:"registerbeanpostprocessors"},"registerBeanPostProcessors"),Object(o.b)("p",null,"\u6ce8\u518c\u62e6\u622a Bean \u521b\u5efa\u7684 Bean \u5904\u7406\u5668"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n    PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);\n}\n")),Object(o.b)("h2",{id:"initmessagesource"},"initMessageSource()"),Object(o.b)("p",null,"\u521d\u59cb\u5316 Message \u6e90"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'initMessageSource();\n\nprotected void initMessageSource() {\n    ConfigurableListableBeanFactory beanFactory = getBeanFactory();\n    if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) {\n        this.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);\n        // Make MessageSource aware of parent MessageSource.\n        if (this.parent != null && this.messageSource instanceof HierarchicalMessageSource) {\n            HierarchicalMessageSource hms = (HierarchicalMessageSource) this.messageSource;\n            if (hms.getParentMessageSource() == null) {\n                // Only set parent context as parent MessageSource if no parent MessageSource\n                // registered already.\n                hms.setParentMessageSource(getInternalParentMessageSource());\n            }\n        }\n        if (logger.isTraceEnabled()) {\n            logger.trace("Using MessageSource [" + this.messageSource + "]");\n        }\n    }\n    else {\n        // Use empty MessageSource to be able to accept getMessage calls.\n        DelegatingMessageSource dms = new DelegatingMessageSource();\n        dms.setParentMessageSource(getInternalParentMessageSource());\n        this.messageSource = dms;\n        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);\n        if (logger.isTraceEnabled()) {\n            logger.trace("No \'" + MESSAGE_SOURCE_BEAN_NAME + "\' bean, using [" + this.messageSource + "]");\n        }\n    }\n}\n')),Object(o.b)("h2",{id:"initapplicationeventmulticaster"},"initApplicationEventMulticaster()"),Object(o.b)("p",null,"\u521d\u59cb\u5316\u5e94\u7528\u6d88\u606f\u5e7f\u64ad\u5668"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'protected void initApplicationEventMulticaster() {\n    ConfigurableListableBeanFactory beanFactory = getBeanFactory();\n    if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) {\n        this.applicationEventMulticaster =\n                beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);\n        if (logger.isTraceEnabled()) {\n            logger.trace("Using ApplicationEventMulticaster [" + this.applicationEventMulticaster + "]");\n        }\n    }\n    else {\n        this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);\n        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);\n        if (logger.isTraceEnabled()) {\n            logger.trace("No \'" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "\' bean, using " +\n                    "[" + this.applicationEventMulticaster.getClass().getSimpleName() + "]");\n        }\n    }\n}\n')),Object(o.b)("h2",{id:"onrefresh"},"onRefresh()"),Object(o.b)("p",null," \u7559\u7ed9\u5b50\u7c7b\u6765\u521d\u59cb\u5316\u5176\u4ed6Bean"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"protected void onRefresh() throws BeansException {\n        // For subclasses: do nothing by default.\n}\n")),Object(o.b)("h2",{id:"registerlisteners"},"registerListeners"),Object(o.b)("p",null," \u67e5\u627e Listener Bean \u5e76\u6ce8\u518c\u5230\u6d88\u606f\u5e7f\u64ad\u4e2d"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"protected void registerListeners() {\n    // Register statically specified listeners first.\n    for (ApplicationListener<?> listener : getApplicationListeners()) {\n        getApplicationEventMulticaster().addApplicationListener(listener);\n    }\n\n    // Do not initialize FactoryBeans here: We need to leave all regular beans\n    // uninitialized to let post-processors apply to them!\n    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);\n    for (String listenerBeanName : listenerBeanNames) {\n        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);\n    }\n\n    // Publish early application events now that we finally have a multicaster...\n    Set<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;\n    this.earlyApplicationEvents = null;\n    if (!CollectionUtils.isEmpty(earlyEventsToProcess)) {\n        for (ApplicationEvent earlyEvent : earlyEventsToProcess) {\n            getApplicationEventMulticaster().multicastEvent(earlyEvent);\n        }\n    }\n}\n")),Object(o.b)("h2",{id:"finishbeanfactoryinitialization"},"finishBeanFactoryInitialization"),Object(o.b)("p",null," \u521d\u59cb\u5316\u5269\u4f59\u7684\u5355\u5b9e\u4f8b"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n    // Initialize conversion service for this context.\n    if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&\n            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {\n        beanFactory.setConversionService(\n                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));\n    }\n\n    // Register a default embedded value resolver if no bean post-processor\n    // (such as a PropertyPlaceholderConfigurer bean) registered any before:\n    // at this point, primarily for resolution in annotation attribute values.\n    if (!beanFactory.hasEmbeddedValueResolver()) {\n        beanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal));\n    }\n\n    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.\n    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);\n    for (String weaverAwareName : weaverAwareNames) {\n        getBean(weaverAwareName);\n    }\n\n    // Stop using the temporary ClassLoader for type matching.\n    beanFactory.setTempClassLoader(null);\n\n    // Allow for caching all bean definition metadata, not expecting further changes.\n    beanFactory.freezeConfiguration();\n\n    // Instantiate all remaining (non-lazy-init) singletons.\n    beanFactory.preInstantiateSingletons();\n}\n")),Object(o.b)("h2",{id:"finishrefresh"},"finishRefresh()"),Object(o.b)("p",null,"\u5b8c\u6210\u5237\u65b0\uff0c\u901a\u77e5\u751f\u547d\u5468\u671f\u5904\u7406\u5668"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"protected void finishRefresh() {\n    // Clear context-level resource caches (such as ASM metadata from scanning).\n    clearResourceCaches();\n\n    // Initialize lifecycle processor for this context.\n    initLifecycleProcessor();\n\n    // Propagate refresh to lifecycle processor first.\n    getLifecycleProcessor().onRefresh();\n\n    // Publish the final event.\n    publishEvent(new ContextRefreshedEvent(this));\n\n    // Participate in LiveBeansView MBean, if active.\n    LiveBeansView.registerApplicationContext(this);\n}\n")))}p.isMDXComponent=!0},505:function(e,n,a){"use strict";a.d(n,"a",(function(){return b})),a.d(n,"b",(function(){return u}));var t=a(0),r=a.n(t);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},b=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(a),d=t,u=b["".concat(s,".").concat(d)]||b[d]||g[d]||o;return a?r.a.createElement(u,i(i({ref:n},l),{},{components:a})):r.a.createElement(u,i({ref:n},l))}));function u(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);