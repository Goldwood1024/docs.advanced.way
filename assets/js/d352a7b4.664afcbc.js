(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{230:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return d}));var r=t(3),a=t(7),i=(t(0),t(270)),o={title:"@RequestMapping"},p={unversionedId:"framework/spring/springmvc/RequestMapping",id:"framework/spring/springmvc/RequestMapping",isDocsHomePage:!1,title:"@RequestMapping",description:"@RequestMapping",source:"@site/docs/framework/spring/springmvc/RequestMapping.md",slug:"/framework/spring/springmvc/RequestMapping",permalink:"/docs.advanced.way/docs/framework/spring/springmvc/RequestMapping",editUrl:"https://github.com/Goldwood1024/docs.advanced.way/docs/docs/framework/spring/springmvc/RequestMapping.md",version:"current",lastUpdatedAt:1616148576,formattedLastUpdatedAt:"3/19/2021",sidebar:"spring",previous:{title:"DispatcherServlet",permalink:"/docs.advanced.way/docs/framework/spring/springmvc/DispatcherServlet"},next:{title:"\u7b80\u4ecb",permalink:"/docs.advanced.way/docs/framework/spring/springboot/\u7b80\u4ecb"}},l=[{value:"@RequestMapping",id:"requestmapping",children:[]},{value:"\u6ce8\u518c",id:"\u6ce8\u518c",children:[{value:"RequestMappingHandlerMapping",id:"requestmappinghandlermapping",children:[]},{value:"AbstractHandlerMethodMapping",id:"abstracthandlermethodmapping",children:[]},{value:"RequestMappingInfo",id:"requestmappinginfo",children:[]}]},{value:"\u67e5\u627e",id:"\u67e5\u627e",children:[{value:"DispatcherServlet",id:"dispatcherservlet",children:[]},{value:"AbstractHandlerMapping",id:"abstracthandlermapping",children:[]},{value:"HandlerExecutionChain",id:"handlerexecutionchain",children:[]}]},{value:"\u62e6\u622a\u5668",id:"\u62e6\u622a\u5668",children:[{value:"WebMvcConfigurer",id:"webmvcconfigurer",children:[]}]}],s={toc:l};function d(e){var n=e.components,o=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,o,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"requestmapping"},"@RequestMapping"),Object(i.b)("p",null,"\u7528\u6765\u5904\u7406\u8bf7\u6c42\u5730\u5740\u6620\u5c04\u7684\u6ce8\u89e3\uff0c\u53ef\u7528\u4e8e\u7c7b\u6216\u65b9\u6cd5\u4e0a"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Mapping\npublic @interface RequestMapping {\n    String name() default "";\n\n    // \u8bf7\u6c42\u7684\u5b9e\u9645\u5730\u5740\n    @AliasFor("path")\n    String[] value() default {};\n    \n    @AliasFor("value")\n    String[] path() default {};\n    // \u8bf7\u6c42\u7684\u65b9\u6cd5\n    RequestMethod[] method() default {};\n    // \u6307\u5b9arequest\u4e2d\u5fc5\u987b\u5305\u542b\u67d0\u4e9b\u53c2\u6570\u503c\u662f\uff0c\u624d\u8ba9\u8be5\u65b9\u6cd5\u5904\u7406\n    String[] params() default {};\n    // \u6307\u5b9arequest\u4e2d\u5fc5\u987b\u5305\u542b\u67d0\u4e9b\u6307\u5b9a\u7684header\u503c\uff0c\u624d\u80fd\u8ba9\u8be5\u65b9\u6cd5\u5904\u7406\u8bf7\u6c42\n    String[] headers() default {};\n    // \u6307\u5b9a\u5904\u7406\u8bf7\u6c42\u7684\u63d0\u4ea4\u5185\u5bb9\u7c7b\u578b\uff08Content-Type\uff09\n    String[] consumes() default {};\n    // \u6307\u5b9a\u8fd4\u56de\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u4ec5\u5f53request\u8bf7\u6c42\u5934\u4e2d\u7684(Accept)\u7c7b\u578b\u4e2d\u5305\u542b\u8be5\u6307\u5b9a\u7c7b\u578b\u624d\u8fd4\u56de\n    String[] produces() default {};\n}\n')),Object(i.b)("h2",{id:"\u6ce8\u518c"},"\u6ce8\u518c"),Object(i.b)("p",null,Object(i.b)("img",{src:t(486).default})),Object(i.b)("h3",{id:"requestmappinghandlermapping"},"RequestMappingHandlerMapping"),Object(i.b)("p",null,"\u7ee7\u627f\u4e86RequestMappingInfoHandlerMapping\uff0c\u5904\u7406\u65b9\u6cd5\u7684@ReqeustMapping\u6ce8\u89e3\uff0c\n\u5c06\u5176\u4e0emethod handler\u4e0e@ReqeustMapping\u6ce8\u89e3\u6784\u5efa\u7684RequestMappingInfo\u5173\u8054\u3002"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\n        implements MatchableHandlerMapping, EmbeddedValueResolverAware {\n\n    public void afterPropertiesSet() {\n        this.config = new RequestMappingInfo.BuilderConfiguration();\n        this.config.setUrlPathHelper(getUrlPathHelper());\n        this.config.setPathMatcher(getPathMatcher());\n        this.config.setSuffixPatternMatch(useSuffixPatternMatch());\n        this.config.setTrailingSlashMatch(useTrailingSlashMatch());\n        this.config.setRegisteredSuffixPatternMatch(useRegisteredSuffixPatternMatch());\n        this.config.setContentNegotiationManager(getContentNegotiationManager());\n\n        // \u8c03\u7528\u7236\u7c7b AbstractHandlerMethodMapping.afterPropertiesSet()\n        super.afterPropertiesSet();\n    }\n    \n    @Override\n    protected boolean isHandler(Class<?> beanType) {\n        // \u5224\u65ad\u662f\u5426\u662f Handler\n        return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||\n                AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));\n    }\n    \n    @Override\n    @Nullable\n    protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {\n        RequestMappingInfo info = createRequestMappingInfo(method);\n        if (info != null) {\n            RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);\n            if (typeInfo != null) {\n                info = typeInfo.combine(info);\n            }\n            String prefix = getPathPrefix(handlerType);\n            if (prefix != null) {\n                info = RequestMappingInfo.paths(prefix).options(this.config).build().combine(info);\n            }\n        }\n        return info;\n    }\n    \n    @Nullable\n    private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {\n        RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);\n        RequestCondition<?> condition = (element instanceof Class ?\n                getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));\n        return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);\n    }\n    \n    protected RequestMappingInfo createRequestMappingInfo(\n            RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {\n\n        RequestMappingInfo.Builder builder = RequestMappingInfo\n                .paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))\n                .methods(requestMapping.method())\n                .params(requestMapping.params())\n                .headers(requestMapping.headers())\n                .consumes(requestMapping.consumes())\n                .produces(requestMapping.produces())\n                .mappingName(requestMapping.name());\n        if (customCondition != null) {\n            builder.customCondition(customCondition);\n        }\n        return builder.options(this.config).build();\n    }\n")),Object(i.b)("h3",{id:"abstracthandlermethodmapping"},"AbstractHandlerMethodMapping"),Object(i.b)("p",null,"\u7ee7\u627fAbstractHandlerMapping,\u5b9a\u4e49\u4e86method handler\u6620\u5c04\u5173\u7cfb\uff0c\u6bcf\u4e00\u4e2amethod handler\u90fd\u4e00\u4e2a\u552f\u4e00\u7684T\u5173\u8054"),Object(i.b)("p",null,"AbstractHandlerMethodMapping\u5b9e\u73b0\u4e86 InitializaingBean \u63a5\u53e3\uff0c\u901a\u8fc7afterProperties\u65b9\u6cd5\u8fdb\u884c\u521d\u59cb\u5316"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'public abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n    private static final String SCOPED_TARGET_NAME_PREFIX = "scopedTarget.";\n\n    @Override\n    public void afterPropertiesSet() {\n        initHandlerMethods();\n    }\n    \n    protected void initHandlerMethods() {\n        // \u904d\u5386\u6240\u6709\u7684bean\n        for (String beanName : getCandidateBeanNames()) {\n            if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {\n                processCandidateBean(beanName);\n            }\n        }\n        handlerMethodsInitialized(getHandlerMethods());\n    }\n    \n    protected String[] getCandidateBeanNames() {\n        return (this.detectHandlerMethodsInAncestorContexts ?\n                BeanFactoryUtils.beanNamesForTypeIncludingAncestors(obtainApplicationContext(), Object.class) :\n                obtainApplicationContext().getBeanNamesForType(Object.class));\n    }\n    \n    protected void processCandidateBean(String beanName) {\n        Class<?> beanType = null;\n        try {\n            beanType = obtainApplicationContext().getType(beanName);\n        }\n        catch (Throwable ex) {\n            // An unresolvable bean type, probably from a lazy bean - let\'s ignore it.\n            if (logger.isTraceEnabled()) {\n                logger.trace("Could not resolve type for bean \'" + beanName + "\'", ex);\n            }\n        }\n\n        //  \u8c03\u7528 RequestMappingHandlerMapping.isHandler()\n        if (beanType != null && isHandler(beanType)) {\n            detectHandlerMethods(beanName);\n        }\n    }\n    \n    // \u63a2\u6d4b HandlerMethod\n    protected void detectHandlerMethods(Object handler) {\n        Class<?> handlerType = (handler instanceof String ?\n                obtainApplicationContext().getType((String) handler) : handler.getClass());\n\n        if (handlerType != null) {\n            Class<?> userType = ClassUtils.getUserClass(handlerType);\n            // \u904d\u5386\u5904\u7406\u7684\u6240\u6709\u65b9\u6cd5\n            Map<Method, T> methods = MethodIntrospector.selectMethods(userType,\n                    (MethodIntrospector.MetadataLookup<T>) method -> {\n                        try {\n                            // RequestMappingHandlerMapping.getMappingForMethod() \u521b\u5efa RequestMappingInfo\n                            return getMappingForMethod(method, userType);\n                        }\n                        catch (Throwable ex) {\n                            throw new IllegalStateException("Invalid mapping on handler class [" +\n                                    userType.getName() + "]: " + method, ex);\n                        }\n                    });\n            if (logger.isTraceEnabled()) {\n                logger.trace(formatMappings(userType, methods));\n            }\n            \n            methods.forEach((method, mapping) -> {\n                Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);\n                // \u628a\u6620\u5c04\u4fe1\u606f\u3001\u5904\u7406\u5668\u548c\u5904\u7406\u5668\u65b9\u6cd5\u6ce8\u518c\u5230\u6620\u5c04\u6ce8\u518c\u4e2d\n                registerHandlerMethod(handler, invocableMethod, mapping);\n            });\n        }\n    }\n    \n    // \u6ce8\u518c\u5165\u53e3\n    protected void registerHandlerMethod(Object handler, Method method, T mapping) {\n        this.mappingRegistry.register(mapping, handler, method);\n    }\n\n    protected HandlerMethod createHandlerMethod(Object handler, Method method) {\n        if (handler instanceof String) {\n            return new HandlerMethod((String) handler,\n                    obtainApplicationContext().getAutowireCapableBeanFactory(), method);\n        }\n        return new HandlerMethod(handler, method);\n    }\n    \n    class MappingRegistry {\n        private final Map<T, MappingRegistration<T>> registry = new HashMap<>();\n\n        public void register(T mapping, Object handler, Method method) {\n            // Assert that the handler method is not a suspending one.\n            if (KotlinDetector.isKotlinType(method.getDeclaringClass())) {\n                Class<?>[] parameterTypes = method.getParameterTypes();\n                if ((parameterTypes.length > 0) && "kotlin.coroutines.Continuation".equals(parameterTypes[parameterTypes.length - 1].getName())) {\n                    throw new IllegalStateException("Unsupported suspending handler method detected: " + method);\n                }\n            }\n            // \u52a0\u9501\n            this.readWriteLock.writeLock().lock();\n            try {\n                // \u521b\u5efa HandlerMethod\n                HandlerMethod handlerMethod = createHandlerMethod(handler, method);\n                validateMethodMapping(handlerMethod, mapping);\n                // \u67e5\u627e\u6ce8\u518c\u8868\n                this.mappingLookup.put(mapping, handlerMethod);\n\n                List<String> directUrls = getDirectUrls(mapping);\n                for (String url : directUrls) {\n                    this.urlLookup.add(url, mapping);\n                }\n\n                String name = null;\n                if (getNamingStrategy() != null) {\n                    name = getNamingStrategy().getName(handlerMethod, mapping);\n                    addMappingName(name, handlerMethod);\n                }\n\n                // \u8de8\u57df\u914d\u7f6e\n                CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);\n                if (corsConfig != null) {\n                    this.corsLookup.put(handlerMethod, corsConfig);\n                }\n\n                // \u6ce8\u518c\u5230 \u6620\u5c04\u8868\u4e2d\n                this.registry.put(mapping, new MappingRegistration<>(mapping, handlerMethod, directUrls, name));\n            }\n            finally {\n                this.readWriteLock.writeLock().unlock();\n            }\n        }\n    }\n}\n')),Object(i.b)("h3",{id:"requestmappinginfo"},"RequestMappingInfo"),Object(i.b)("p",null,"\u6620\u5c04\u4fe1\u606f\u7ed3\u6784"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public final class RequestMappingInfo implements RequestCondition<RequestMappingInfo> {\n    private final String name;\n\n    private final PatternsRequestCondition patternsCondition;\n\n    private final RequestMethodsRequestCondition methodsCondition;\n\n    private final ParamsRequestCondition paramsCondition;\n\n    private final HeadersRequestCondition headersCondition;\n\n    private final ConsumesRequestCondition consumesCondition;\n\n    private final ProducesRequestCondition producesCondition;\n\n    private final RequestConditionHolder customConditionHolder;\n}\n")),Object(i.b)("h2",{id:"\u67e5\u627e"},"\u67e5\u627e"),Object(i.b)("h3",{id:"dispatcherservlet"},"DispatcherServlet"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public class DispatcherServlet extends FrameworkServlet {\n    private List<HandlerMapping> handlerMappings;\n\n    HttpServletRequest processedRequest = request;\n    protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        mappedHandler = getHandler(processedRequest);\n    }\n\n    @Nullable\n    protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n        if (this.handlerMappings != null) {\n            for (HandlerMapping mapping : this.handlerMappings) {\n                // \u8c03\u7528 AbstractHandlerMapping.getHandler()\n                HandlerExecutionChain handler = mapping.getHandler(request);\n                if (handler != null) {\n                    return handler;\n                }\n            }\n        }\n        return null;\n    }\n}\n")),Object(i.b)("h3",{id:"abstracthandlermapping"},"AbstractHandlerMapping"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'public abstract class AbstractHandlerMapping extends WebApplicationObjectSupport\n        implements HandlerMapping, Ordered, BeanNameAware {\n    private final List<HandlerInterceptor> adaptedInterceptors = new ArrayList<>();\n\n    @Override\n    @Nullable\n    public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n        Object handler = getHandlerInternal(request);\n        if (handler == null) {\n            handler = getDefaultHandler();\n        }\n        if (handler == null) {\n            return null;\n        }\n        // Bean name or resolved handler?\n        if (handler instanceof String) {\n            String handlerName = (String) handler;\n            handler = obtainApplicationContext().getBean(handlerName);\n        }\n\n        HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);\n\n        if (logger.isTraceEnabled()) {\n            logger.trace("Mapped to " + handler);\n        }\n        else if (logger.isDebugEnabled() && !request.getDispatcherType().equals(DispatcherType.ASYNC)) {\n            logger.debug("Mapped to " + executionChain.getHandler());\n        }\n\n        // \u8de8\u57df\u914d\u7f6e\n        if (hasCorsConfigurationSource(handler) || CorsUtils.isPreFlightRequest(request)) {\n            CorsConfiguration config = (this.corsConfigurationSource != null ? this.corsConfigurationSource.getCorsConfiguration(request) : null);\n            CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);\n            config = (config != null ? config.combine(handlerConfig) : handlerConfig);\n            executionChain = getCorsHandlerExecutionChain(request, executionChain, config);\n        }\n\n        return executionChain;\n    }\n\n    protected HandlerExecutionChain getCorsHandlerExecutionChain(HttpServletRequest request,\n            HandlerExecutionChain chain, @Nullable CorsConfiguration config) {\n\n        if (CorsUtils.isPreFlightRequest(request)) {\n            HandlerInterceptor[] interceptors = chain.getInterceptors();\n            chain = new HandlerExecutionChain(new PreFlightHandler(config), interceptors);\n        }\n        else {\n            chain.addInterceptor(0, new CorsInterceptor(config));\n        }\n        return chain;\n    }\n\n\n    protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {\n        HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?\n                (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));\n\n        String lookupPath = this.urlPathHelper.getLookupPathForRequest(request, LOOKUP_PATH);\n        // \u6dfb\u52a0\u62e6\u622a\u5668\n        for (HandlerInterceptor interceptor : this.adaptedInterceptors) {\n            if (interceptor instanceof MappedInterceptor) {\n                MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;\n                if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) {\n                    chain.addInterceptor(mappedInterceptor.getInterceptor());\n                }\n            }\n            else {\n                chain.addInterceptor(interceptor);\n            }\n        }\n        return chain;\n    }\n}\n')),Object(i.b)("h3",{id:"handlerexecutionchain"},"HandlerExecutionChain"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'public class HandlerExecutionChain {\n    private final Object handler;\n\n    @Nullable\n    private HandlerInterceptor[] interceptors;\n\n    @Nullable\n    private List<HandlerInterceptor> interceptorList;\n\n    private int interceptorIndex = -1;\n    \n    boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HandlerInterceptor[] interceptors = getInterceptors();\n        if (!ObjectUtils.isEmpty(interceptors)) {\n            // \u4f9d\u6b21\u6267\u884c\u62e6\u622a\u5668\n            for (int i = 0; i < interceptors.length; i++) {\n                HandlerInterceptor interceptor = interceptors[i];\n                if (!interceptor.preHandle(request, response, this.handler)) {\n                    triggerAfterCompletion(request, response, null);\n                    return false;\n                }\n                this.interceptorIndex = i;\n            }\n        }\n        return true;\n    }\n    \n    void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)\n            throws Exception {\n\n        HandlerInterceptor[] interceptors = getInterceptors();\n        if (!ObjectUtils.isEmpty(interceptors)) {\n            for (int i = interceptors.length - 1; i >= 0; i--) {\n                HandlerInterceptor interceptor = interceptors[i];\n                interceptor.postHandle(request, response, this.handler, mv);\n            }\n        }\n    }\n\n    /**\n     * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.\n     * Will just invoke afterCompletion for all interceptors whose preHandle invocation\n     * has successfully completed and returned true.\n     */\n    void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)\n            throws Exception {\n\n        HandlerInterceptor[] interceptors = getInterceptors();\n        if (!ObjectUtils.isEmpty(interceptors)) {\n            for (int i = this.interceptorIndex; i >= 0; i--) {\n                HandlerInterceptor interceptor = interceptors[i];\n                try {\n                    interceptor.afterCompletion(request, response, this.handler, ex);\n                }\n                catch (Throwable ex2) {\n                    logger.error("HandlerInterceptor.afterCompletion threw exception", ex2);\n                }\n            }\n        }\n    }\n\n    @Nullable\n    public HandlerInterceptor[] getInterceptors() {\n        if (this.interceptors == null && this.interceptorList != null) {\n            this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[0]);\n        }\n        return this.interceptors;\n    }\n}\n')),Object(i.b)("h2",{id:"\u62e6\u622a\u5668"},"\u62e6\u622a\u5668"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"\u5b9e\u73b0 ",Object(i.b)("inlineCode",{parentName:"li"},"HandlerInterceptor")," \u63a5\u53e3")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public class HandlerInterceptorImpl implements HandlerInterceptor {\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        // to do someting\n        return true;\n    }\n}\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"\u6dfb\u52a0\u5230\u62e6\u622a\u5668\u5217\u8868")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// \u57fa\u4e8e springboot \u914d\u7f6e\n@Configuration\npublic class HandlerInterceptorConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new HandlerInterceptorImpl());\n    }\n}\n")),Object(i.b)("h3",{id:"webmvcconfigurer"},"WebMvcConfigurer"),Object(i.b)("p",null,"WebMvcConfigurer\u914d\u7f6e\u7c7b\u5176\u5b9e\u662fSpring\u5185\u90e8\u7684\u4e00\u79cd\u914d\u7f6e\u65b9\u5f0f\uff0c\u91c7\u7528JavaBean\u7684\u5f62\u5f0f\u6765\u4ee3\u66ff\u4f20\u7edf\u7684xml\u914d\u7f6e\u6587\u4ef6\u5f62\u5f0f\u8fdb\u884c\u9488\u5bf9\u6846\u67b6\u4e2a\u6027\u5316\u5b9a\u5236\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e9bHandler\uff0cInterceptor\uff0cViewResolver\uff0cMessageConverter"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"public interface WebMvcConfigurer {\n    default void configurePathMatch(PathMatchConfigurer configurer) {\n    }\n\n    default void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n    }\n\n    default void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n    }\n\n    default void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n    }\n\n    default void addFormatters(FormatterRegistry registry) {\n    }\n\n// \u62e6\u622a\u5668\u914d\u7f6e \n    default void addInterceptors(InterceptorRegistry registry) {\n    }\n\n    default void addResourceHandlers(ResourceHandlerRegistry registry) {\n    }\n    \n// \u8de8\u57df\u914d\u7f6e\n    default void addCorsMappings(CorsRegistry registry) {\n    }\n    \n// \u89c6\u56fe\u8df3\u8f6c\u63a7\u5236\u5668\n    default void addViewControllers(ViewControllerRegistry registry) {\n    }\n    \n// \u914d\u7f6e\u89c6\u56fe\u89e3\u6790\u5668\n    default void configureViewResolvers(ViewResolverRegistry registry) {\n    }\n\n    default void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n    }\n\n    default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) {\n    }\n\n    default void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n    }\n\n    default void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n    }\n\n    default void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {\n    }\n\n    default void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {\n    }\n\n    @Nullable\n    default Validator getValidator() {\n        return null;\n    }\n\n    @Nullable\n    default MessageCodesResolver getMessageCodesResolver() {\n        return null;\n    }\n}\n")))}d.isMDXComponent=!0},270:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return h}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),d=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=d(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},g=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(t),g=r,h=c["".concat(o,".").concat(g)]||c[g]||u[g]||i;return t?a.a.createElement(h,p(p({ref:n},s),{},{components:t})):a.a.createElement(h,p({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=t[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},486:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/2019062015300488-26d054958dfa4cbbdea16b9d23428620.png"}}]);